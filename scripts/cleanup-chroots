#!/bin/sh
# $FreeBSD: ports/Tools/portbuild/scripts/cleanup-chroots,v 1.11 2010/06/25 22:49:56 linimon Exp $

# To be run on the client, this script looks for chroot directories
# that have not been used in 60 minutes, as well as directories listed
# as 'in use' that have not been touched in 5 days (corresponding to
# port builds that have timed out or shut down uncleanly) and prunes
# them to reclaim space.

pbd=${PORTBUILD_DATA:-/var/portbuild}

# XXX TODO promote
# all times are in minutes
REMOVE_EMPTY_BUILD_TIME=10080
REMOVE_INUSE_CHROOT_TIME=7200
REMOVE_NOTINUSE_CHROOT_TIME=60

#VERBOSE=1

kill_procs()
{
    dir=$1

    pids="XXX"
    while [ ! -z "${pids}" ]; do
	pids=$(fstat -f "$dir" | tail +2 | awk '{print $3}' | sort -u)
	if [ ! -z "${pids}" ]; then
	    echo "cleanup-chroots: Killing off pids in ${dir} on $(hostname)"
	    ps -p $pids
	    kill -KILL ${pids} 2> /dev/null
	    sleep 2
	    echo
	fi
    done
}

# clean up a single mount
cleanup_mount() {
    chroot=$1
    mount=$2

    if [ -d ${chroot}${mount} ]; then
	mdir=$(fstat -f ${chroot}${mount} | head -2 | tail -1 | awk '{print $5}')
	if [ "${mdir}" = "MOUNT" ]; then
	    umount ${chroot}${mount} || echo "cleanup-chroots: Cleanup of ${chroot}${mount} on $(hostname) failed!"
	fi
	if [ "${mdir}" = "${chroot}${mount}" ]; then
	    kill_procs ${chroot}${mount}
	    umount ${chroot}${mount} || echo "cleanup-chroots: Cleanup of ${chroot}${mount} on $(hostname) failed!"
	fi
    fi
}

# cleanup all mounts (old NFS, devfs, linux), as well as mds
cleanup_all() {
    chroot=$1

    mounts=$(mount | grep ${chroot} | awk '{print $3}')
    if [ ! -z "${mounts}" ]; then
	if [ $VERBOSE ]; then
	    echo "cleanup-chroots: trying to kill off mounts:"
	    echo ${mounts}
	    echo
	fi
	for j in ${mounts}; do
	    umount ${j} || cleanup_mount ${j}
	done
	# XXX MCL is this redundant with the above?
	umount ${chroot}/compat/linux/proc || cleanup_mount ${chroot}/compat/linux/proc
    fi
    if [ "${use_zfs}" != "1" -a "${use_md_swap}" = "1" ]; then
	chrootnum=$(basename ${chroot})
	umount -f /dev/md${chroot}
	mdconfig -d -u ${chrootnum}
    fi
}

# note: uname is not being overridden (should not need client.conf here)
arch=$(uname -m)

# note: if any are missing, the script exits here.
. ${pbd}/${arch}/client.conf
. ${pbd}/${arch}/portbuild.conf
. ${pbd}/${arch}/portbuild.$(hostname)

if [ "${use_zfs}" = "1" ]; then
    old_chroots=$(find ${scratchdir}/*/*/* -prune -mmin +${REMOVE_NOTINUSE_CHROOT_TIME} 2> /dev/null)
else 
    old_chroots=$(find ${scratchdir}/*/*/chroot/* -prune -mmin +${REMOVE_NOTINUSE_CHROOT_TIME} 2> /dev/null)
fi

if [ ! -z "${old_chroots}" ]; then
    echo "cleanup-chroots: non-empty chroots > 1 hr old found on $(hostname):"
    echo ${old_chroots}
    echo
else
    if [ $VERBOSE ]; then
	echo "cleanup-chroots: no non-empty chroots > 1 hr old found on $(hostname)."
	echo
    fi
fi

if [ ! -z "${old_chroots}" ]; then
    # Flag non-empty chroots with no active builds
    for chroot in ${old_chroots}; do
	if [ ! -d ${chroot}/used ]; then
	    stale_chroots="${chroot} ${stale_chroots}"
	# Also flag "in use" chroots that were set up more than N days ago
	elif [ ! -z "`find ${chroot}/used -prune -mmin +${REMOVE_INUSE_CHROOT_TIME}`" ]; then
	    echo "cleanup-chroots: Found old files on $(hostname):"
	    ls -l ${chroot}/tmp ${chroot}/used
	    echo "${chroot} allegedly in use but > N days old"
	    stale_chroots="${chroot} ${stale_chroots}"
	    echo
	fi
    done
fi

if [ ! -z "${stale_chroots}" ]; then
    echo "cleanup-chroots: non-empty, > 1 hr old stale chroots found on $(hostname):"
    echo ${stale_chroots}
    echo
else
    if [ $VERBOSE ]; then
	echo "cleanup-chroots: no non-empty, > 1 hr old stale chroots found on $(hostname)."
	echo
    fi
fi

# save off non-empty, stale chroots for possible examination
if [ -z "${stale_chroots}" ]; then
    mkdir -p ${scratchdir}/old
    for chroot in ${stale_chroots}; do
	mv ${chroot} ${scratchdir}/old
    done
    rm -rf ${scratchdir}/old 2> /dev/null
    if [ -d ${scratchdir}/old ]; then
	chflags -R noschg ${scratchdir}/old
	rm -rf ${scratchdir}/old
    fi
fi

# cleanup old NFS and devfs mounts for stale chroots
if [ ! -z "${stale_chroots}" ]; then
    for chroot in ${stale_chroots}; do
	cleanup_all ${chroot}
    done
fi

# now look for empty stale builds
if [ "${use_zfs}" = "1" ]; then
    # XXX MCL zfs case not yet tested; is this the right command?
    builds=$(find ${scratchdir}/[0-9]*/* -prune -mmin +${REMOVE_EMPTY_BUILD_TIME} 2> /dev/null)
else 
    builds=$(find ${scratchdir}/[0-9]*/* -prune -mmin +${REMOVE_EMPTY_BUILD_TIME} 2> /dev/null)
fi

for build in ${builds}; do
    if [ -e ${build} ]; then
	stale_builds="${build} ${stale_builds}"
    fi
done

if [ ! -z "${stale_builds}" ]; then
    echo "cleanup-chroots: empty stale builds found on $(hostname):"
    echo ${stale_builds}
    echo
else
    if [ $VERBOSE ]; then
	echo "cleanup-chroots: no empty stale builds found on $(hostname)."
	echo
    fi
fi

# cleanup old NFS and devfs mounts for vanished chroots in stale builds
if [ ! -z "${stale_builds}" ]; then
    for build in ${stale_builds}; do
	# XXX MCL HACK! what I really want is "give me the next 2 subdirs after $build"
	mounts=$(mount | grep "${build}" | awk '{print $3}' | grep -E "/dev$")
	if [ $VERBOSE ]; then
	    echo "cleanup-chroots: suspected stale mounts on $(hostname):"
	    echo ${mounts}
	    echo
	fi
	if [ ! -z "${mounts}" ]; then
	    for mount in ${mounts}; do
		target=`echo ${mount} | sed -e "s@/dev@@"`
		cleanup_all ${target}
	    done
	fi
	rm -rf ${build}
    done
fi
